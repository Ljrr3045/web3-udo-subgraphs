// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddStudentWallet extends ethereum.Event {
  get params(): AddStudentWallet__Params {
    return new AddStudentWallet__Params(this);
  }
}

export class AddStudentWallet__Params {
  _event: AddStudentWallet;

  constructor(event: AddStudentWallet) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddTeacherWallet extends ethereum.Event {
  get params(): AddTeacherWallet__Params {
    return new AddTeacherWallet__Params(this);
  }
}

export class AddTeacherWallet__Params {
  _event: AddTeacherWallet;

  constructor(event: AddTeacherWallet) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangeKeeperSystem extends ethereum.Event {
  get params(): ChangeKeeperSystem__Params {
    return new ChangeKeeperSystem__Params(this);
  }
}

export class ChangeKeeperSystem__Params {
  _event: ChangeKeeperSystem;

  constructor(event: ChangeKeeperSystem) {
    this._event = event;
  }

  get _newKeeperSystem(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _oldKeeperSystem(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangeReceiverTax extends ethereum.Event {
  get params(): ChangeReceiverTax__Params {
    return new ChangeReceiverTax__Params(this);
  }
}

export class ChangeReceiverTax__Params {
  _event: ChangeReceiverTax;

  constructor(event: ChangeReceiverTax) {
    this._event = event;
  }

  get _lastTax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newTax(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChangeSenderTax extends ethereum.Event {
  get params(): ChangeSenderTax__Params {
    return new ChangeSenderTax__Params(this);
  }
}

export class ChangeSenderTax__Params {
  _event: ChangeSenderTax;

  constructor(event: ChangeSenderTax) {
    this._event = event;
  }

  get _lastTax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newTax(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DistributeReward extends ethereum.Event {
  get params(): DistributeReward__Params {
    return new DistributeReward__Params(this);
  }
}

export class DistributeReward__Params {
  _event: DistributeReward;

  constructor(event: DistributeReward) {
    this._event = event;
  }

  get _destination(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _amountDistributed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _date(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveStudentWallet extends ethereum.Event {
  get params(): RemoveStudentWallet__Params {
    return new RemoveStudentWallet__Params(this);
  }
}

export class RemoveStudentWallet__Params {
  _event: RemoveStudentWallet;

  constructor(event: RemoveStudentWallet) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveTeacherWallet extends ethereum.Event {
  get params(): RemoveTeacherWallet__Params {
    return new RemoveTeacherWallet__Params(this);
  }
}

export class RemoveTeacherWallet__Params {
  _event: RemoveTeacherWallet;

  constructor(event: RemoveTeacherWallet) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RescueStuckToken extends ethereum.Event {
  get params(): RescueStuckToken__Params {
    return new RescueStuckToken__Params(this);
  }
}

export class RescueStuckToken__Params {
  _event: RescueStuckToken;

  constructor(event: RescueStuckToken) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _date(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserWhiteList extends ethereum.Event {
  get params(): UserWhiteList__Params {
    return new UserWhiteList__Params(this);
  }
}

export class UserWhiteList__Params {
  _event: UserWhiteList;

  constructor(event: UserWhiteList) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class VoteForDestination extends ethereum.Event {
  get params(): VoteForDestination__Params {
    return new VoteForDestination__Params(this);
  }
}

export class VoteForDestination__Params {
  _event: VoteForDestination;

  constructor(event: VoteForDestination) {
    this._event = event;
  }

  get _wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _destination(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _date(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VotesValidation extends ethereum.Event {
  get params(): VotesValidation__Params {
    return new VotesValidation__Params(this);
  }
}

export class VotesValidation__Params {
  _event: VotesValidation;

  constructor(event: VotesValidation) {
    this._event = event;
  }

  get _votesForUniversity(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _votesForTeachers(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _votesForStudents(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _resetDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _isDistributed(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class FundManager extends ethereum.SmartContract {
  static bind(address: Address): FundManager {
    return new FundManager("FundManager", address);
  }

  MINIMUM_AMOUNT_TO_DISTRIBUTE(): BigInt {
    let result = super.call(
      "MINIMUM_AMOUNT_TO_DISTRIBUTE",
      "MINIMUM_AMOUNT_TO_DISTRIBUTE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_AMOUNT_TO_DISTRIBUTE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_AMOUNT_TO_DISTRIBUTE",
      "MINIMUM_AMOUNT_TO_DISTRIBUTE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_AMOUNT_TO_VOTE(): BigInt {
    let result = super.call(
      "MINIMUM_AMOUNT_TO_VOTE",
      "MINIMUM_AMOUNT_TO_VOTE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_AMOUNT_TO_VOTE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_AMOUNT_TO_VOTE",
      "MINIMUM_AMOUNT_TO_VOTE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTES_DURATION(): BigInt {
    let result = super.call("VOTES_DURATION", "VOTES_DURATION():(uint32)", []);

    return result[0].toBigInt();
  }

  try_VOTES_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VOTES_DURATION",
      "VOTES_DURATION():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDestinationWithMoreVotes(): i32 {
    let result = super.call(
      "getDestinationWithMoreVotes",
      "getDestinationWithMoreVotes():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_getDestinationWithMoreVotes(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getDestinationWithMoreVotes",
      "getDestinationWithMoreVotes():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getStudentsWallets(): Array<Address> {
    let result = super.call(
      "getStudentsWallets",
      "getStudentsWallets():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getStudentsWallets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getStudentsWallets",
      "getStudentsWallets():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getStudentsWalletsLength(): BigInt {
    let result = super.call(
      "getStudentsWalletsLength",
      "getStudentsWalletsLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getStudentsWalletsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStudentsWalletsLength",
      "getStudentsWalletsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTeachersWallets(): Array<Address> {
    let result = super.call(
      "getTeachersWallets",
      "getTeachersWallets():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getTeachersWallets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTeachersWallets",
      "getTeachersWallets():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTeachersWalletsLength(): BigInt {
    let result = super.call(
      "getTeachersWalletsLength",
      "getTeachersWalletsLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTeachersWalletsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTeachersWalletsLength",
      "getTeachersWalletsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalFundsRaised(): BigInt {
    let result = super.call(
      "getTotalFundsRaised",
      "getTotalFundsRaised():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalFundsRaised(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalFundsRaised",
      "getTotalFundsRaised():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWalletsAlreadyVoted(): Array<Address> {
    let result = super.call(
      "getWalletsAlreadyVoted",
      "getWalletsAlreadyVoted():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getWalletsAlreadyVoted(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWalletsAlreadyVoted",
      "getWalletsAlreadyVoted():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWalletsAlreadyVotedLength(): BigInt {
    let result = super.call(
      "getWalletsAlreadyVotedLength",
      "getWalletsAlreadyVotedLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getWalletsAlreadyVotedLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWalletsAlreadyVotedLength",
      "getWalletsAlreadyVotedLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isStudentWallet(_wallet: Address): boolean {
    let result = super.call(
      "isStudentWallet",
      "isStudentWallet(address):(bool)",
      [ethereum.Value.fromAddress(_wallet)],
    );

    return result[0].toBoolean();
  }

  try_isStudentWallet(_wallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStudentWallet",
      "isStudentWallet(address):(bool)",
      [ethereum.Value.fromAddress(_wallet)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTeacherWallet(_wallet: Address): boolean {
    let result = super.call(
      "isTeacherWallet",
      "isTeacherWallet(address):(bool)",
      [ethereum.Value.fromAddress(_wallet)],
    );

    return result[0].toBoolean();
  }

  try_isTeacherWallet(_wallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTeacherWallet",
      "isTeacherWallet(address):(bool)",
      [ethereum.Value.fromAddress(_wallet)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWalletAlreadyVoted(_wallet: Address): boolean {
    let result = super.call(
      "isWalletAlreadyVoted",
      "isWalletAlreadyVoted(address):(bool)",
      [ethereum.Value.fromAddress(_wallet)],
    );

    return result[0].toBoolean();
  }

  try_isWalletAlreadyVoted(_wallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWalletAlreadyVoted",
      "isWalletAlreadyVoted(address):(bool)",
      [ethereum.Value.fromAddress(_wallet)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeperSystem(): Address {
    let result = super.call("keeperSystem", "keeperSystem():(address)", []);

    return result[0].toAddress();
  }

  try_keeperSystem(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeperSystem", "keeperSystem():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastFundsDestination(): i32 {
    let result = super.call(
      "lastFundsDestination",
      "lastFundsDestination():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_lastFundsDestination(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "lastFundsDestination",
      "lastFundsDestination():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  receiverTax(): BigInt {
    let result = super.call("receiverTax", "receiverTax():(uint32)", []);

    return result[0].toBigInt();
  }

  try_receiverTax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("receiverTax", "receiverTax():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  senderTax(): BigInt {
    let result = super.call("senderTax", "senderTax():(uint32)", []);

    return result[0].toBigInt();
  }

  try_senderTax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("senderTax", "senderTax():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  studentsWallets(param0: BigInt): Address {
    let result = super.call(
      "studentsWallets",
      "studentsWallets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_studentsWallets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "studentsWallets",
      "studentsWallets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  teachersWallets(param0: BigInt): Address {
    let result = super.call(
      "teachersWallets",
      "teachersWallets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_teachersWallets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "teachersWallets",
      "teachersWallets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  udoWallet(): Address {
    let result = super.call("udoWallet", "udoWallet():(address)", []);

    return result[0].toAddress();
  }

  try_udoWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("udoWallet", "udoWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votesForStudents(): BigInt {
    let result = super.call(
      "votesForStudents",
      "votesForStudents():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_votesForStudents(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votesForStudents",
      "votesForStudents():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votesForTeachers(): BigInt {
    let result = super.call(
      "votesForTeachers",
      "votesForTeachers():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_votesForTeachers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votesForTeachers",
      "votesForTeachers():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votesForUniversity(): BigInt {
    let result = super.call(
      "votesForUniversity",
      "votesForUniversity():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_votesForUniversity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votesForUniversity",
      "votesForUniversity():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votesInit(): BigInt {
    let result = super.call("votesInit", "votesInit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votesInit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votesInit", "votesInit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  walletsAlreadyVoted(param0: BigInt): Address {
    let result = super.call(
      "walletsAlreadyVoted",
      "walletsAlreadyVoted(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_walletsAlreadyVoted(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "walletsAlreadyVoted",
      "walletsAlreadyVoted(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelisted(param0: Address): boolean {
    let result = super.call("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_whitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _udoWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _keeperSystem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStudentWalletCall extends ethereum.Call {
  get inputs(): AddStudentWalletCall__Inputs {
    return new AddStudentWalletCall__Inputs(this);
  }

  get outputs(): AddStudentWalletCall__Outputs {
    return new AddStudentWalletCall__Outputs(this);
  }
}

export class AddStudentWalletCall__Inputs {
  _call: AddStudentWalletCall;

  constructor(call: AddStudentWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStudentWalletCall__Outputs {
  _call: AddStudentWalletCall;

  constructor(call: AddStudentWalletCall) {
    this._call = call;
  }
}

export class AddTeacherWalletCall extends ethereum.Call {
  get inputs(): AddTeacherWalletCall__Inputs {
    return new AddTeacherWalletCall__Inputs(this);
  }

  get outputs(): AddTeacherWalletCall__Outputs {
    return new AddTeacherWalletCall__Outputs(this);
  }
}

export class AddTeacherWalletCall__Inputs {
  _call: AddTeacherWalletCall;

  constructor(call: AddTeacherWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTeacherWalletCall__Outputs {
  _call: AddTeacherWalletCall;

  constructor(call: AddTeacherWalletCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangeKeeperSystemCall extends ethereum.Call {
  get inputs(): ChangeKeeperSystemCall__Inputs {
    return new ChangeKeeperSystemCall__Inputs(this);
  }

  get outputs(): ChangeKeeperSystemCall__Outputs {
    return new ChangeKeeperSystemCall__Outputs(this);
  }
}

export class ChangeKeeperSystemCall__Inputs {
  _call: ChangeKeeperSystemCall;

  constructor(call: ChangeKeeperSystemCall) {
    this._call = call;
  }

  get _newKeeperSystem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKeeperSystemCall__Outputs {
  _call: ChangeKeeperSystemCall;

  constructor(call: ChangeKeeperSystemCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveStudentWalletCall extends ethereum.Call {
  get inputs(): RemoveStudentWalletCall__Inputs {
    return new RemoveStudentWalletCall__Inputs(this);
  }

  get outputs(): RemoveStudentWalletCall__Outputs {
    return new RemoveStudentWalletCall__Outputs(this);
  }
}

export class RemoveStudentWalletCall__Inputs {
  _call: RemoveStudentWalletCall;

  constructor(call: RemoveStudentWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStudentWalletCall__Outputs {
  _call: RemoveStudentWalletCall;

  constructor(call: RemoveStudentWalletCall) {
    this._call = call;
  }
}

export class RemoveTeacherWalletCall extends ethereum.Call {
  get inputs(): RemoveTeacherWalletCall__Inputs {
    return new RemoveTeacherWalletCall__Inputs(this);
  }

  get outputs(): RemoveTeacherWalletCall__Outputs {
    return new RemoveTeacherWalletCall__Outputs(this);
  }
}

export class RemoveTeacherWalletCall__Inputs {
  _call: RemoveTeacherWalletCall;

  constructor(call: RemoveTeacherWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTeacherWalletCall__Outputs {
  _call: RemoveTeacherWalletCall;

  constructor(call: RemoveTeacherWalletCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueStuckTokenCall extends ethereum.Call {
  get inputs(): RescueStuckTokenCall__Inputs {
    return new RescueStuckTokenCall__Inputs(this);
  }

  get outputs(): RescueStuckTokenCall__Outputs {
    return new RescueStuckTokenCall__Outputs(this);
  }
}

export class RescueStuckTokenCall__Inputs {
  _call: RescueStuckTokenCall;

  constructor(call: RescueStuckTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RescueStuckTokenCall__Outputs {
  _call: RescueStuckTokenCall;

  constructor(call: RescueStuckTokenCall) {
    this._call = call;
  }
}

export class SetReceiverTaxCall extends ethereum.Call {
  get inputs(): SetReceiverTaxCall__Inputs {
    return new SetReceiverTaxCall__Inputs(this);
  }

  get outputs(): SetReceiverTaxCall__Outputs {
    return new SetReceiverTaxCall__Outputs(this);
  }
}

export class SetReceiverTaxCall__Inputs {
  _call: SetReceiverTaxCall;

  constructor(call: SetReceiverTaxCall) {
    this._call = call;
  }

  get _taxPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReceiverTaxCall__Outputs {
  _call: SetReceiverTaxCall;

  constructor(call: SetReceiverTaxCall) {
    this._call = call;
  }
}

export class SetSenderTaxCall extends ethereum.Call {
  get inputs(): SetSenderTaxCall__Inputs {
    return new SetSenderTaxCall__Inputs(this);
  }

  get outputs(): SetSenderTaxCall__Outputs {
    return new SetSenderTaxCall__Outputs(this);
  }
}

export class SetSenderTaxCall__Inputs {
  _call: SetSenderTaxCall;

  constructor(call: SetSenderTaxCall) {
    this._call = call;
  }

  get _taxPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSenderTaxCall__Outputs {
  _call: SetSenderTaxCall;

  constructor(call: SetSenderTaxCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class VoteForDestinationCall extends ethereum.Call {
  get inputs(): VoteForDestinationCall__Inputs {
    return new VoteForDestinationCall__Inputs(this);
  }

  get outputs(): VoteForDestinationCall__Outputs {
    return new VoteForDestinationCall__Outputs(this);
  }
}

export class VoteForDestinationCall__Inputs {
  _call: VoteForDestinationCall;

  constructor(call: VoteForDestinationCall) {
    this._call = call;
  }

  get _destination(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class VoteForDestinationCall__Outputs {
  _call: VoteForDestinationCall;

  constructor(call: VoteForDestinationCall) {
    this._call = call;
  }
}

export class VotesValidationCall extends ethereum.Call {
  get inputs(): VotesValidationCall__Inputs {
    return new VotesValidationCall__Inputs(this);
  }

  get outputs(): VotesValidationCall__Outputs {
    return new VotesValidationCall__Outputs(this);
  }
}

export class VotesValidationCall__Inputs {
  _call: VotesValidationCall;

  constructor(call: VotesValidationCall) {
    this._call = call;
  }
}

export class VotesValidationCall__Outputs {
  _call: VotesValidationCall;

  constructor(call: VotesValidationCall) {
    this._call = call;
  }
}
